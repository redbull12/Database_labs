Server [localhost]:
Database [postgres]:
Port [5432]:
Username [postgres]:
Пароль пользователя postgres:
psql (17.6)
ПРЕДУПРЕЖДЕНИЕ: Кодовая страница консоли (866) отличается от основной
                страницы Windows (1251).
                8-битовые (русские) символы могут отображаться некорректно.
                Подробнее об этом смотрите документацию psql, раздел
                "Notes for Windows users".
Введите "help", чтобы получить справку.

postgres=# CREATE TABLE departments (
postgres(# dept_id SERIAL PRIMARY KEY,
postgres(# dept_name VARCHAR(100) NOT NULL,
postgres(# location VARCHAR(100)
postgres(# );
             
postgres=# CREATE TABLE employees (
postgres(# emp_id SERIAL PRIMARY KEY,
postgres(# first_name VARCHAR(50) NOT NULL,
postgres(# last_name VARCHAR(50) NOT NULL,
postgres(# dept_id INTEGER REFERENCES departments(dept_id)
postgres(# );
CREATE TABLE
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
postgres(# emp_id SERIAL PRIMARY KEY,
postgres(# first_name VARCHAR(50) NOT NULL,
postgres(# last_name VARCHAR(50) NOT NULL,
postgres(# dept_id INTEGER,
postgres(# FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
postgres(# );
CREATE TABLE
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
postgres(# emp_id SERIAL PRIMARY KEY,
postgres(# first_name VARCHAR(50),
postgres(# last_name VARCHAR(50)
postgres(# );
CREATE TABLE
postgres=# ALTER TABLE employees ADD CONSTRAINT fk_employee_department FOREIGN KEY (dept_id) REFERENCES departments(dept_id);
ОШИБКА:  столбец "dept_id", указанный в ограничении внешнего ключа, не существует
postgres=# ALTER TABLE employees ADD COLUMN dept_id INTEGER;
ALTER TABLE
postgres=# ALTER TABLE employees ADD CONSTRAINT fk_employee_department FOREIGN KEY (dept_id) REFERENCES departments(dept_id);
ALTER TABLE
postgres=# INSERT INTO departments (dept_name, location) VALUES ('Engineering', 'Building A'), ('Marketing', 'Building B'), ('HR', 'Building C');
INSERT 0 3
postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES ('John', 'Smith', 1);
INSERT 0 1
postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES ('Sam', 'Smith', 99);
ОШИБКА:  INSERT или UPDATE в таблице "employees" нарушает ограничение внешнего ключа "fk_employee_department"
ПОДРОБНОСТИ:  Ключ (dept_id)=(99) отсутствует в таблице "departments".
postgres=# DELETE FROM departments WHERE dept_id = 1;
ОШИБКА:  UPDATE или DELETE в таблице "departments" нарушает ограничение внешнего ключа "fk_employee_department" таблицы "employees"
ПОДРОБНОСТИ:  На ключ (dept_id)=(1) всё ещё есть ссылки в таблице "employees".
postgres=# CREATE TABLE emplyees2 (
postgres(# emp_id SERIAL PRIMARY KEY,
postgres(# first_name VARCHAR(50),
postgres(# last_name VARCHAR(50),
postgres(# dept_id INTEGER REFERENCES departments(dept_id) ON DELETE CASCADE
postgres(# );
CREATE TABLE
postgres=# INSERT INTO departments (dept_name, location) VALUES ('Engineering', 'Building A'), ('Marketing', 'Building B');
INSERT 0 2
postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES ('John', 'Smith', 1);
INSERT 0 1
postgres=# DELETE FROM departments WHERE dept_id = 1;
ОШИБКА:  UPDATE или DELETE в таблице "departments" нарушает ограничение внешнего ключа "fk_employee_department" таблицы "employees"
ПОДРОБНОСТИ:  На ключ (dept_id)=(1) всё ещё есть ссылки в таблице "employees".
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# DELETE FROM departments WHERE dept_id = 1;
DELETE 1
postgres=# DROP TABLE employees2;
ОШИБКА:  таблица "employees2" не существует
postgres=# DROP TABLE emplyees2;
DROP TABLE

postgres=# CREATE TABLE employees (
postgres(# emp_id SERIAL PRIMARY KEY,
postgres(# first_name VARCHAR(50) NOT NULL,
postgres(# last_name VARCHAR(50) NOT NULL,
postgres(# dept_id INTEGER REFERENCES departments(dept_id) ON DELETE SET NULL
postgres(# );
CREATE TABLE
postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES ('John', 'Smith', 1);
ОШИБКА:  INSERT или UPDATE в таблице "employees" нарушает ограничение внешнего ключа "employees_dept_id_fkey"
ПОДРОБНОСТИ:  Ключ (dept_id)=(1) отсутствует в таблице "departments".
postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES ('John', 'Smith', 2);
INSERT 0 1
postgres=# DELETE FROM departments WHERE dept_id = 2;
DELETE 1
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
postgres(# emp_id SERIAL PRIMARY KEY,
postgres(# first_name VARCHAR(50),
postgres(# last_name VARCHAR(50),
postgres(# dept_id INTEGER REFERENCES departments(dept_id) ON UPDATE CASCADE
postgres(# );
CREATE TABLE
postgres=# UPDATE departments SET dept_id = 99 WHERE dept_id = 3;
UPDATE 1

postgres=# CREATE TABLE users (
postgres(# user_id SERIAL PRIMARY KEY,
postgres(# user_name VARCHAR(100) NOT NULL,
postgres(# email VARCHAR(100) UNIQUE NOT NULL,
postgres(# created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
postgres(# );
CREATE TABLE
postgres=# CREATE TABLE user_profile (
postgres(# profile_id SERIAL PRIMARY KEY,
postgres(# user_id INTEGER UNIQUE NOT NULL,
postgres(# first_name VARCHAR(50),
postgres(# last_name VARCHAR(50),
postgres(# bio TEXT,
postgres(# profile_picture_url VARCHAR(255),
postgres(# FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
postgres(# );
CREATE TABLE
postgres=# INSERT INTO users (user_name, email) VALUES ('johndoe', 'john@example.com');
INSERT 0 1
postgres=# INSERT INTO user_profile (user_id, first_name, last_name, bio) VALUES (1, 'John', 'Doe', 'software developer passionate about databases');
INSERT 0 1
postgres=# \d
                           ╤яшёюъ юЄэю°хэшщ
 ╤їхьр  |             ╚ь              |        ╥шя         | ┬ырфхыхЎ
--------+-----------------------------+--------------------+----------
 public | departments                 | ЄрсышЎр            | postgres
 public | departments_dept_id_seq     | яюёыхфютрЄхы№эюёЄ№ | postgres
 public | employees                   | ЄрсышЎр            | postgres
 public | employees_emp_id_seq        | яюёыхфютрЄхы№эюёЄ№ | postgres
 public | user_profile                | ЄрсышЎр            | postgres
 public | user_profile_profile_id_seq | яюёыхфютрЄхы№эюёЄ№ | postgres
 public | users                       | ЄрсышЎр            | postgres
 public | users_user_id_seq           | яюёыхфютрЄхы№эюёЄ№ | postgres
(8 ёЄЁюъ)

postgres=# DROP TABLE departments, employees;
DROP TABLE
postgres=# CREATE TABLE departments (
postgres(# dept_id SERIAL PRIMARY KEY,
postgres(# dept_name VARCHAR(50) NOT NULL,
postgres(# manager_name VARCHAR(50),
postgres(# budget DECIMAL(10, 2)
postgres(# );
CREATE TABLE
postgres=# CREATE TABLE employees (
postgres(# emp_id SERIAL PRIMARY KEY,
postgres(# first_name VARCHAR(100) NOT NULL,
postgres(# last_name VARCHAR(100) NOT NULL,
postgres(# position VARCHAR(100),
postgres(# salary DECIMAL(10, 2),
postgres(# hire_date DATE DEFAULT CURRENT_DATE,
postgres(# dept_id INTEGER NOT NULL,
postgres(# FOREIGN KEY (dept_id) REFERENCES departments(dept_id) ON DELETE RESTRICT
postgres(# );
CREATE TABLE                                           ^
postgres=# INSERT INTO departments (dept_name, manager_name, budget) VALUES ('Engineering', 'Alice Johnson', 500000.00), ('Marketing', 'Bob Wilson', 200000.00);
INSERT 0 2
postgres=# INSERT INTO employees (first_name, last_name, position, salary, dept_id) VALUES ('John', 'Doe', 'Software Engineering', 75000.00, 1), ('Jane', 'Smith', 'DevOps Engineer', 80000.00, 1),
postgres-# ('Sam', 'Wilson', 'Senior Developer', 100000.00, 2);
INSERT 0 3
postgres=# SELECT d.dept_name, e.first_name, e.last_name, e.position FROM departments d JOIN employees e ON d.dept_id = e.dept_id ORDER BY d.dept_name, e.last_name;
  dept_name  | first_name | last_name |       position
-------------+------------+-----------+----------------------
 Engineering | John       | Doe       | Software Engineering
 Engineering | Jane       | Smith     | DevOps Engineer
 Marketing   | Sam        | Wilson    | Senior Developer
(3 ёЄЁюъш)


postgres=# \d
                           ╤яшёюъ юЄэю°хэшщ
 ╤їхьр  |             ╚ь              |        ╥шя         | ┬ырфхыхЎ
--------+-----------------------------+--------------------+----------
 public | departments                 | ЄрсышЎр            | postgres
 public | departments_dept_id_seq     | яюёыхфютрЄхы№эюёЄ№ | postgres
 public | employees                   | ЄрсышЎр            | postgres
 public | employees_emp_id_seq        | яюёыхфютрЄхы№эюёЄ№ | postgres
 public | user_profile                | ЄрсышЎр            | postgres
 public | user_profile_profile_id_seq | яюёыхфютрЄхы№эюёЄ№ | postgres
 public | users                       | ЄрсышЎр            | postgres
 public | users_user_id_seq           | яюёыхфютрЄхы№эюёЄ№ | postgres
(8 ёЄЁюъ)


postgres=# CREATE TABLE students (
postgres(# student_id SERIAL PRIMARY KEY,
postgres(# first_name VARCHAR(50) NOT NULL,
postgres(# last_name VARCHAR(50) NOT NULL,
postgres(# email VARCHAR(50) UNIQUE,
postgres(# enrollment_date DATE DEFAULT CURRENT_DATE
postgres(# );
CREATE TABLE
postgres=# CREATE TABLE courses (
postgres(# course_id SERIAL PRIMARY KEY,
postgres(# course_code VARCHAR(10) UNIQUE NOT NULL,
postgres(# course_name VARCHAR(100) NOT NULL,
postgres(# credits INTEGER NOT NULL,
postgres(# instructor VARCHAR(100)
postgres(# );
CREATE TABLE
postgres=# CREATE TABLE student_enrollments (
postgres(# enrollment_id SERIAL PRIMARY KEY,
postgres(# student_id INTEGER NOT NULL,
postgres(# course_id INTEGER NOT NULL,
postgres(# enrollment_date DATE DEFAULT CURRENT_DATE,
postgres(# grade CHAR(2),
postgres(# FOREIGN KEY (student_id) REFERENCES students(student_id) ON DELETE CASCADE,
postgres(# FOREIGN KEY (course_id) REFERENCES courses(course_id) ON DELETE CASCADE,
postgres(# UNIQUE(student_id, course_id)
postgres(# );
CREATE TABLE
postgres=# INSERT INTO students (first_name, last_name, email) VALUES
postgres-# ('Alice', 'Johnson', 'alice@university.edu'),
postgres-# ('Bob', 'Smith', 'bob@university.edu'),
postgres-# ('Carol', 'Wilson', 'carol@university.edu');
INSERT 0 3
postgres=# INSERT INTO courses (course_code, course_name, credits, instructor) VALUES
postgres-# ('CS101', 'Introduction to Programming', 3 'Dr. Brown'),
postgres-# ('CS201', 'Data Structures', 4, 'Dr. Davis'),
postgres-# ('MATH101', 'Calculus I', 4, 'Dr. Wilson');
ОШИБКА:  ошибка синтаксиса (примерное положение: "'Dr. Brown'")
СТРОКА 2: ('CS101', 'Introduction to Programming', 3 'Dr. Brown'),
                                                  ^
postgres=# INSERT INTO courses (course_code, course_name, credits, instructor) VALUES
postgres-# ('CS101', 'Introduction to Programming', 3, 'Dr. Brown'),
postgres-# ('CS201', 'Data Structures', 4, 'Dr. Davis');
INSERT 0 2
postgres=# INSERT INTO courses (course_code, course_name, credits, instructor) VALUES
postgres-# ('MATH101', 'Calculus I', 4, 'Dr. Wilson');
INSERT 0 1
postgres=# INSERT INTO student_enrollments (student_id, course_id, grade) VALUES
postgres-# (1, 1, 'A'),
postgres-# (1, 2, 'B+'),
postgres-# (2, 1, 'A-'),
postgres-# (2, 3, 'B'),
postgres-# (3, 2, 'A'),
postgres-# (3, 3, 'A-');
INSERT 0 6
postgres=# SELECT
postgres-# s.first_name || ' ' || s.last_name AS student_name,
postgres-# c.course_code,
postgres-# c.course_name,
postgres-# sse.grade,
postgres-# se.enrollment_date
postgres-# FROM students s
postgres-# JOIN student_enrollments se ON s.student_id = se.student_id
postgres-# JOIN courses c ON se.course_id = c.course_id
postgres-# ORDER BY s.last_name, c.course_code;
ОШИБКА:  таблица "sse" отсутствует в предложении FROM
СТРОКА 5: sse.grade,
          ^
postgres=# SELECT
postgres-# s.first_name || ' ' || s.last_name AS student_name,
postgres-# c.course_code,
postgres-# c.course_name,
postgres-# se.grade,
postgres-# se.enrollment_date
postgres-# FROM students s
postgres-# JOIN student_enrollments se ON s.student_id = se.student_id
postgres-# JOIN courses c ON se.course_id = c.course_id
postgres-# ORDER BY s.last_name, c.course_code;
 student_name  | course_code |         course_name         | grade | enrollment_date
---------------+-------------+-----------------------------+-------+-----------------
 Alice Johnson | CS101       | Introduction to Programming | A     | 2025-09-17
 Alice Johnson | CS201       | Data Structures             | B+    | 2025-09-17
 Bob Smith     | CS101       | Introduction to Programming | A-    | 2025-09-17
 Bob Smith     | MATH101     | Calculus I                  | B     | 2025-09-17
 Carol Wilson  | CS201       | Data Structures             | A     | 2025-09-17
 Carol Wilson  | MATH101     | Calculus I                  | A-    | 2025-09-17
(6 ёЄЁюъ)

postgres=# SELECT s.first_name, s.last_name, se.grade
postgres-# FROM students s
postgres-# JOIN student_enrollments se ON s.student_id = se.student_id
postgres-# JOIN courses c ON se.student_id = s.student_id
postgres-# WHERE s.email = 'alice@university.edu';
 first_name | last_name | grade
------------+-----------+-------
 Alice      | Johnson   | A
 Alice      | Johnson   | B+
 Alice      | Johnson   | A
 Alice      | Johnson   | B+
 Alice      | Johnson   | A
 Alice      | Johnson   | B+
(6 ёЄЁюъ)

postgres=# SELECT s.first_name, s.last_name, se.grade
postgres-# FROM students s
postgres-# JOIN student_enrollments se ON s.student_id = se.student_id
postgres-# JOIN courses c ON se.student_id = s.student_id
postgres-# WHERE c.course_code = 'CS101';
 first_name | last_name | grade
------------+-----------+-------
 Alice      | Johnson   | A
 Alice      | Johnson   | B+
 Bob        | Smith     | A-
 Bob        | Smith     | B
 Carol      | Wilson    | A
 Carol      | Wilson    | A-
(6 ёЄЁюъ)


postgres=# SELECT c.course_code, c.course_name, c.credits, se.grade
postgres-# FROM courses c
postgres-# JOIN student_enrollments se ON c.course_id = se.course_id
postgres-# JOIN students s ON se.student_id = s.student_id
postgres-# WHERE s.email = 'alice@university.edu';
 course_code |         course_name         | credits | grade
-------------+-----------------------------+---------+-------
 CS101       | Introduction to Programming |       3 | A
 CS201       | Data Structures             |       4 | B+
(2 ёЄЁюъш)


postgres=#